{
	"info": {
		"_postman_id": "38871178-0648-4741-83ca-b838295f1c3e",
		"name": "3.Dynamic_Test_with_Test_Checking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29102080",
		"_collection_link": "https://lunar-crescent-539530.postman.co/workspace/Dipa~e629a7aa-0802-4fbb-920a-31aa6d9f2a0d/collection/29102080-38871178-0648-4741-83ca-b838295f1c3e?action=share&source=collection_link&creator=29102080"
	},
	"item": [
		{
			"name": "Create Booking Info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstname = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(\"First Name: \"+firstname)\r",
							"pm.environment.set(\"first_name\",firstname)\r",
							"\r",
							"var lastname = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(\"Last Name: \"+lastname)\r",
							"pm.environment.set(\"last_name\",lastname)\r",
							"\r",
							"var totalprice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(\"Total Price: \"+totalprice)\r",
							"pm.environment.set(\"total_price\",totalprice)\r",
							"\r",
							"var depositpaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"console.log(\"Deposition of Payment: \"+depositpaid)\r",
							"pm.environment.set(\"deposit_paid\",depositpaid)\r",
							"\r",
							"var additional = pm.variables.replaceIn(\"{{$randomProduct}}\")\r",
							"console.log(\"Additional Needs: \"+additional)\r",
							"pm.environment.set(\"additional_needs\",additional)\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"console.log(today.format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"check_in\", today.add(2,'d').format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"check_out\", today.add(2,'d').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"pm.environment.set(\"booking_id\", jsonData.bookingid)\r",
							"console.log(jsonData.bookingid)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{first_name}}\",\r\n\t\"lastname\" : \"{{last_name}}\",\r\n\t\"totalprice\" : {{total_price}},\r\n\t\"depositpaid\" : {{deposit_paid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{check_in}}\",\r\n    \t\"checkout\" : \"{{check_out}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additional_needs}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status_code = pm.response.code\r",
							"console.log(status_code)\r",
							"if(status_code == 200){\r",
							"pm.test(\"200 ; STATUS : SUCCESS\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json()\r",
							"pm.test(\"First Name Validation\", function () {\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"first_name\"));\r",
							"});\r",
							"pm.test(\"Last Name Validation\", function () {\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"last_name\"));\r",
							"});\r",
							"pm.test(\"Total Price\", function () {\r",
							"    pm.expect(jsonData.totalprice).to.eql(Number(pm.environment.get(\"total_price\")));\r",
							"});\r",
							"pm.test(\"Deposition of Payment\" , function () {\r",
							"    pm.expect(String(jsonData.depositpaid)).to.eql(pm.environment.get(\"deposit_paid\"));\r",
							"});\r",
							"pm.test(\"Date of Check In\" ,function () {\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"check_in\"));\r",
							"});\r",
							"pm.test(\"Date of Checking Out\", function() {\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"check_out\"));\r",
							"});\r",
							"pm.test(\"Additional Needs\", function() {\r",
							"    pm.expect(jsonData.additionalneeds).to.eql(pm.environment.get(\"additional_needs\"));\r",
							"})}\r",
							"else if(status_code==201){\r",
							"    pm.test(\"201 ; STATUS : CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"})}\r",
							"else if(status_code==202){\r",
							"    pm.test(\"202 ; STATUS : ACCEPTED\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"})}\r",
							"else if(status_code==400){\r",
							"    pm.test(\"400 ; STATUS : BAD REQUEST\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"})}\r",
							"else if(status_code==401){\r",
							"    pm.test(\"401 ; STATUS : UNAUTHORIZED\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"})}\r",
							"else if(status_code==402){\r",
							"    pm.test(\"402 ; STATUS : PAYMENT REQUIRED\", function () {\r",
							"    pm.response.to.have.status(402);\r",
							"})}\r",
							"else if(status_code==403){\r",
							"    pm.test(\"403 ; STATUS : FORBIDDEN\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"})}\r",
							"else if(status_code==404){\r",
							"    pm.test(\"404 ; STATUS : NOT FOUND\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"})}\r",
							"else if(status_code==405){\r",
							"    pm.test(\"405 ; STATUS : METHOD NOT ALLOWED\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"})}\r",
							"else if(status_code==500){\r",
							"    pm.test(\"500 ; STATUS : INTERNAL SERVER ERROR\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"})}\r",
							"else if(status_code==501){\r",
							"    pm.test(\"501 ; STATUS : NOT IMPLEMENTED\", function () {\r",
							"    pm.response.to.have.status(501);\r",
							"})}\r",
							"else if(status_code==502){\r",
							"    pm.test(\"502 ; STATUS : BAD GATEWAY\", function () {\r",
							"    pm.response.to.have.status(502);\r",
							"})}\r",
							"else if(status_code==503){\r",
							"    pm.test(\"503 ; STATUS : SERVICE UNAVAILABLE\", function () {\r",
							"    pm.response.to.have.status(503);\r",
							"})}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{booking_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{booking_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var tokendata = pm.response.json()\r",
							"pm.environment.set(\"token_id\", tokendata.token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstname = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(\"First Name: \"+firstname)\r",
							"pm.environment.set(\"update_first_name\",firstname)\r",
							"\r",
							"var lastname = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(\"Last Name: \"+lastname)\r",
							"pm.environment.set(\"update_last_name\",lastname)\r",
							"\r",
							"var totalprice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(\"Total Price: \"+totalprice)\r",
							"pm.environment.set(\"update_total_price\",totalprice)\r",
							"\r",
							"var depositpaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"console.log(\"Deposition of Payment: \"+depositpaid)\r",
							"pm.environment.set(\"update_deposit_paid\",depositpaid)\r",
							"\r",
							"var additional = pm.variables.replaceIn(\"{{$randomProduct}}\")\r",
							"console.log(\"Additional Needs: \"+additional)\r",
							"pm.environment.set(\"update_additional_needs\",additional)\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"console.log(today.format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"update_check_in\", today.add(5,'d').format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"update_check_out\", today.add(2,'d').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token_id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{update_first_name}}\",\r\n\t\"lastname\" : \"{{update_last_name}}\",\r\n\t\"totalprice\" : {{update_total_price}},\r\n\t\"depositpaid\" : {{update_deposit_paid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{update_check_in}}\",\r\n    \t\"checkout\" : \"{{update_check_out}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{update_additional_needs}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{booking_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{booking_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Last Updated Booking Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status_code = pm.response.code\r",
							"console.log(status_code)\r",
							"if(status_code==200){\r",
							"pm.test(\"200 ; STATUS : SUCCESS\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json()\r",
							"pm.test(\"First Name Validation\", function () {\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"update_first_name\"));\r",
							"});\r",
							"pm.test(\"Last Name Validation\", function () {\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"update_last_name\"));\r",
							"});\r",
							"pm.test(\"Total Price\", function () {\r",
							"    pm.expect(jsonData.totalprice).to.eql(Number(pm.environment.get(\"update_total_price\")));\r",
							"});\r",
							"pm.test(\"Deposition of Payment\" , function () {\r",
							"    pm.expect(String(jsonData.depositpaid)).to.eql(pm.environment.get(\"update_deposit_paid\"));\r",
							"});\r",
							"pm.test(\"Date of Check In\" ,function () {\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"update_check_in\"));\r",
							"});\r",
							"pm.test(\"Date of Checking Out\", function() {\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"update_check_out\"));\r",
							"});\r",
							"pm.test(\"Additional Needs\", function() {\r",
							"    pm.expect(jsonData.additionalneeds).to.eql(pm.environment.get(\"update_additional_needs\"));\r",
							"})}\r",
							"else if(status_code==201){\r",
							"    pm.test(\"201 ; STATUS : CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"})}\r",
							"else if(status_code==202){\r",
							"    pm.test(\"202 ; STATUS : ACCEPTED\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"})}\r",
							"else if(status_code==400){\r",
							"    pm.test(\"400 ; STATUS : BAD REQUEST\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"})}\r",
							"else if(status_code==401){\r",
							"    pm.test(\"401 ; STATUS : UNAUTHORIZED\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"})}\r",
							"else if(status_code==402){\r",
							"    pm.test(\"402 ; STATUS : PAYMENT REQUIRED\", function () {\r",
							"    pm.response.to.have.status(402);\r",
							"})}\r",
							"else if(status_code==403){\r",
							"    pm.test(\"403 ; STATUS : FORBIDDEN\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"})}\r",
							"else if(status_code==404){\r",
							"    pm.test(\"404 ; STATUS : NOT FOUND\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"})}\r",
							"else if(status_code==405){\r",
							"    pm.test(\"405 ; STATUS : METHOD NOT ALLOWED\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"})}\r",
							"else if(status_code==500){\r",
							"    pm.test(\"500 ; STATUS : INTERNAL SERVER ERROR\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"})}\r",
							"else if(status_code==501){\r",
							"    pm.test(\"501 ; STATUS : NOT IMPLEMENTED\", function () {\r",
							"    pm.response.to.have.status(501);\r",
							"})}\r",
							"else if(status_code==502){\r",
							"    pm.test(\"502 ; STATUS : BAD GATEWAY\", function () {\r",
							"    pm.response.to.have.status(502);\r",
							"})}\r",
							"else if(status_code==503){\r",
							"    pm.test(\"503 ; STATUS : SERVICE UNAVAILABLE\", function () {\r",
							"    pm.response.to.have.status(503);\r",
							"})}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{booking_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{booking_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking Info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status_code = pm.response.code\r",
							"console.log(status_code)\r",
							"\r",
							"if(status_code==200){\r",
							"pm.test(\"200 ; STATUS : SUCCESS\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});}\r",
							"else if(status_code==201){\r",
							"    pm.test(\"201 ; STATUS : CREATED\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"})}\r",
							"\r",
							"else if(status_code==202){\r",
							"    pm.test(\"202 ; STATUS : ACCEPTED\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"})}\r",
							"else if(status_code==400){\r",
							"    pm.test(\"400 ; STATUS : BAD REQUEST\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"})}\r",
							"else if(status_code==401){\r",
							"    pm.test(\"401 ; STATUS : UNAUTHORIZED\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"})}\r",
							"else if(status_code==402){\r",
							"    pm.test(\"402 ; STATUS : PAYMENT REQUIRED\", function () {\r",
							"    pm.response.to.have.status(402);\r",
							"})}\r",
							"else if(status_code==403){\r",
							"    pm.test(\"403 ; STATUS : FORBIDDEN\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"})}\r",
							"else if(status_code==404){\r",
							"    pm.test(\"404 ; STATUS : NOT FOUND\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"})}\r",
							"else if(status_code==405){\r",
							"    pm.test(\"405 ; STATUS : METHOD NOT ALLOWED\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"})}\r",
							"else if(status_code==500){\r",
							"    pm.test(\"500 ; STATUS : INTERNAL SERVER ERROR\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"})}\r",
							"else if(status_code==501){\r",
							"    pm.test(\"501 ; STATUS : NOT IMPLEMENTED\", function () {\r",
							"    pm.response.to.have.status(501);\r",
							"})}\r",
							"else if(status_code==502){\r",
							"    pm.test(\"502 ; STATUS : BAD GATEWAY\", function () {\r",
							"    pm.response.to.have.status(502);\r",
							"})}\r",
							"else if(status_code==503){\r",
							"    pm.test(\"503 ; STATUS : SERVICE UNAVAILABLE\", function () {\r",
							"    pm.response.to.have.status(503);\r",
							"})}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token_id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{base_url}}/booking/{{booking_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{booking_id}}"
					]
				}
			},
			"response": []
		}
	]
}